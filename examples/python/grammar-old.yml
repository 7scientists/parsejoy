#To Dos: add comments, backslash linebreaks

#A simple Python grammar

#Automatically tokenize the source code using the LITERAL and REGEX definitions?

tokenizer:
  if:
    literal: if
  elif:
    literal: elif
  else:
    literal: else
  pass:
    literal: pass
  _true:
    literal: "True"
  def:
    literal: def

  keyword:
    or: [if, elif, else, pass, _true, def]

  newline:
    regex: \n

  whitespace:
    regex: '[ \t]+'

  colon:
    literal: ':'

  comma:
    literal: ','

  equal:
    literal: '='

  oparens:
    literal: '('

  cparens:
    literal: ')'

  name:
    regex: '[\w\_][\w\d\_]*'

  line:
    - or:
      - keyword
      - name
      - oparens
      - cparens
      - equal
      - comma
      - colon
    - optional:
       repeat:
         or:
           - keyword
           - name
           - colon
           - comma
           - equal
           - whitespace
           - oparens
           - cparens

  start:
    repeat:
      or:
        -
          - indent
          - optional: line
          - newline
        -
          - optional: whitespace
          - newline

start:
  file_input

#single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
single_input:
  or:
    - newline
    - simple_stmt
    - 
      - compound_stmt
      - newline

#file_input: (NEWLINE | stmt)* ENDMARKER
file_input:
  - optional:
    - repeat:
       or:
        - newline
        - stmt
  - endmarker

endmarker:
  or:
    - newline
    - optional: whitespace

#eval_input: testlist NEWLINE* ENDMARKER
eval_input:
  - testlist
  - repeat: newline
  - endmarker

decorator:
  - optional: whitespace
  - literal: '@'
  - dotted_name
  - optional:
     - optional: whitespace
     - literal: '('
     - optional: whitespace
     - optional: arglist
     - optional: whitespace
     - literal: ')'
  - optional: whitespace
  - newline

decorators:
  repeat: decorator

decorated:
  - decorators
  - or:
     - classdef
     - funcdef
     - async_funcdef

async_funcdef:
  - async
  - funcdef

funcdef:
  ast-node: #creates a new AST node in the tree
    props:
      node_type: funcdef
    value:
      - optional: whitespace
      - literal: 'def'
      - whitespace
      - ast-prop:
          name: name
          value: name
      - optional: whitespace
      - parameters
      - optional: whitespace
      - literal: ':'
      - optional: whitespace
      - ast-list:
          name: body
          value: suite

parameters:
  - literal: '('
  - ast-list: #creates a new AST list
      name: parameters
      value: typedargslist
  - optional: whitespace
  - literal: ')'


#typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [','
#       ['*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]]
#     |  '*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
typedargslist:
  or:
    - #tfpdef ['=' test] (',' tfpdef ['=' test])* [',' ['*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]]
      - tfpdef
      - optional:
         repeat:
           - optional: whitespace
           - literal: ','
           - tfpdef
      - optional:
         - optional: whitespace
         - literal: ','
         - optional:
            or:
              -
                - vargs
                - tfpdefs
                - optional:
                    - optional: whitespace
                    - literal: ','
                    - kwargs
              - kwargs
    -
      - vargs
      - optional: whitespace
      - tfpdefs
      - optional:
         - optional: whitespace
         - literal: ','
         - kwargs
    -
      - kwargs

tfpdefs:
  - optional:
      repeat:
        - optional: whitespace
        - literal: ','
        - optional: whitespace
        - tfpdef

tfpdef:
  ast-node:
    props:
      node_type: typed_parameter
    value:
      - optional: whitespace
      - ast-prop:
          name: name
          value: name
      - optional:
         ast-list:
           name: type_annotation
           value:
             - optional: whitespace
             - literal: ':'
             - optional: whitespace
             - test
      - optional: whitespace
      - optional:
        - literal: '='
        - optional: whitespace
        - test


varargslist:
  or:
    - #tfpdef ['=' test] (',' tfpdef ['=' test])* [',' ['*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]]
      - vfpdef
      - optional:
         repeat:
           - optional: whitespace
           - literal: ','
           - vfpdef
      - optional:
         - optional: whitespace
         - literal: ','
         - optional:
            or:
              -
                - vargs
                - vfpdefs
                - optional:
                    - optional: whitespace
                    - literal: ','
                    - kwargs
              - kwargs
    -
      - vargs
      - optional: whitespace
      - vfpdefs
      - optional:
         - optional: whitespace
         - literal: ','
         - kwargs
    -
      - kwargs

vfpdefs:
  - optional:
      repeat:
        - optional: whitespace
        - literal: ','
        - optional: whitespace
        - vfpdef

vfpdef:
  ast-node:
    props:
      node_type: parameter
    value:
      - optional: whitespace
      - ast-prop:
          name: name
          value: name
      - optional: whitespace
      - optional:
        - literal: '='
        - optional: whitespace
        - test

vargs:
  ast-node:
    props:
      node_type: vargs
    value:
      - optional: whitespace
      - literal: '*'
      - optional: whitespace
      - ast-node:
         name: parameter
         value: parameter

kwargs:
  ast-node:
    props:
      node_type: kwargs
    value:
      - optional: whitespace
      - literal: '**'
      - optional: whitespace
      - ast-node:
          name: parameter
          value: parameter

test_nocond:
  or:
    - or_test
    - lambdef_nocond

whitespace:
  regex: '[ \t]+' #should not match newlines

name:
  regex: '[\w_]+[\w\d\_]*'

newline:
  regex: '\n'

async:
  literal: async

parameter:
  ast-node:
    props:
      node_type: parameter
    value:
      - optional: whitespace
      - ast-prop:
          name: name
          value: name
      - optional:
         ast-list:
           name: type_annotation
           value:
             - optional: whitespace
             - literal: ':'
             - optional: whitespace
             - test
      - optional: whitespace

#test: or_test ['if' or_test 'else' test] | lambdef
test:
  ast-list:
    name: test
    value:
      - or:
        - # a test expression (e.g "5" or "1 or 2" or "4 if ... else ...")
          - or_test
          - optional:
             ast-node:
                name: ifexpr
                props:
                  node_type: ifexpr
                value:
                 - optional: whitespace
                 - literal: if
                 - optional: whitespace
                 - or_test
                 - optional: whitespace
                 - literal: else
                 - optional: whitespace
                 - test
        - lambdef #a lambda definition

#test_nocond: or_test | lambdef_nocond
test_nocond:
  - or:
     - or_test
     - lambdef_nocond

lambda:
  - optional: whitespace
  - literal: lambda
  - whitespace

#lambdef: 'lambda' [varargslist] ':' test
lambdef:
  - lambda
  - optional:
      varargslist
  - optional: whitespace
  - literal: ':'
  - optional: whitespace
  - test

#lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
lambdef_nocond:
  - literal: lambda
  - optional:
      - varargslist
  - literal: ':'
  - test_nocond

#or_test: and_test (  'or' and_test)*
or_test: # 1 and 2 or 4 or 5 or 6
   - or:
     -
       ast-node:
         props:
           node_type: or
         value:
           ast-list:
             name: operands
             value:
               - and_test
               - repeat:
                  - optional: whitespace
                  - literal: or
                  - whitespace
                  - and_test
     - and_test

#and_test: not_test ('and' not_test)*
and_test:
  - or:
    -
      ast-node:
        props:
          node_type: and
        value:
          ast-list:
            name: operands
            value:
             - not_test
             - repeat:
                - optional: whitespace
                - literal: and
                - optional: whitespace
                - not_test
    - not_test


#not_test: 'not' not_test | comparison
not_test:
  or:
    -
      ast-node:
        props:
          node_type: not
        value:
          - optional: whitespace
          - literal: not
          - whitespace
          - ast-list:
              name: operand
              value:
                - not_test
    -
      - comparison

#comparison: expr (comp_op expr)*
#we write it as (expr comp_op expr)* | expr
comparison:
  - or:
    - ast-node:
        props:
          node_type: comparison
        value:
          ast-list:
            name: operands
            value:
              - expr
              - repeat:
                 - ast-node:
                     props:
                       node_type: operator
                     value: comp_op
                 - expr
    - expr

comp_op:
  - optional: whitespace
  - ast-prop:
     name: op
     value:
      - or:
         - literal: '<'
         - literal: '>'
         - literal: '=='
         - literal: '>='
         - literal: '<='
         - literal: '<>'
         - literal: '!='
         - literal: 'in'
         - literal: 'not'
         - literal: 'in'
         - literal: 'is'
         - literal: 'is not'
  - optional: whitespace

star_expr:
  - literal: '*'
  - optional: whitespace
  - expr

expr:
  ast-node:
    props:
      node-type: expr
    value:
      - xor_expr
      - optional:
         repeat:
          - optional: whitespace
          - literal: '|'
          - optional: whitespace
          - xor_expr

xor_expr:
  - and_expr
  - optional:
     repeat:
      - optional: whitespace
      - literal: '^'
      - optional: whitespace
      - and_expr

and_expr:
  - shift_expr
  - optional:
     repeat:
      - optional: whitespace
      - literal: '&'
      - optional: whitespace
      - shift_expr

shift_expr:
  - arith_expr
  - optional:
     repeat:
      - optional: whitespace
      - or:
        - literal: '<<'
        - literal: '>>'
      - optional: whitespace
      - arith_expr

arith_expr:
  - term
  - optional:
     repeat:
      - optional: whitespace
      - or:
        - literal: '+'
        - literal: '-'
      - optional: whitespace
      - term

term:
  - factor
  - optional:
     repeat:
      - optional: whitespace
      - or:
        - literal: '*'
        - literal: '@'
        - literal: '/'
        - literal: '%'
        - literal: '//'
      - optional: whitespace
      - factor

factor:
  or:
    - power
    -
      - or:
        - literal: '+'
        - literal: '-'
        - literal: '~'
      - optional: whitespace
      - factor

power:
  - atom_expr
  - optional:
    - optional: whitespace
    - literal: '**'
    - optional: whitespace
    - factor

atom_expr:
  - optional:
     - literal: await
     - whitespace
  - atom
  - optional:
      repeat:
        trailer

atom:
  or:
    -
      - literal: '('
      - optional: whitespace
      - optional:
         or:
           - yield_expr
           - testlist_comp
      - optional: whitespace
      - literal: ')'
    -
      - literal: '['
      - optional: whitespace
      - optional: testlist_comp
      - optional: whitespace
      - literal: ']'
    -
      - literal: '{'
      - optional: whitespace
      - optional: dictorsetmaker
      - optional: whitespace
      - literal: '}'
    - name
    - number
    - repeat: string
    - literal: '...'
    - literal: None
    - literal: 'True'
    - literal: 'False'

#to do: finish this
number:
  regex: '\d+'

#to do: finish this
string:
  regex: '"[^"]+"'

testlist_comp:
  - or:
    - test
    - star_expr
  - or:
    - comp_for
    -
      - optional:
         repeat:
          - optional: whitespace
          - literal: ','
          - optional: whitespace
          - or:
            - test
            - star_expr
      - optional:
        - optional: whitespace
        - literal: ','

trailer:
  or:
    -
      - optional: whitespace
      - literal: '('
      - optional: arglist
      - optional: whitespace
      - literal: ')'
    -
      - optional: whitespace
      - literal: '['
      - optional: whitespace
      - subscriptlist
      - optional: whitespace
      - literal: ']'
    -
      - optional: whitespace
      - literal: '.'
      - name

subscriptlist:
  - subscript
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - subscript
  - optional:
    - optional: whitespace
    - literal: ','

subscript:
  or:
    - test
    -
      - optional: test
      - optional: whitespace
      - literal: ':'
      - optional: whitespace
      - optional: test
      - optional: sliceop

sliceop:
  - optional: whitespace
  - literal: ':'
  - optional: whitespace
  - optional: test

exprlist:
  - or:
    - expr
    - star_expr
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - or:
        - expr
        - star_expr
  - optional:
    - optional: whitespace
    - literal: ','

testlist:
  - test
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - test
  - optional:
    - optional: whitespace
    - literal: ','

#(
#  (
#    (test ':' test | '**' expr)
#    (comp_for | 
#      (',' 
#        (test ':' test | '**' expr)
#      )* [',']
#    )
#  ) 
#  |
#  (
#    (test | star_expr)
#    (comp_for |
#      (',' 
#        (test | star_expr)
#      )* [',']
#    )
#  )
#)

dictorsetmaker:
  or:
    - or:
      -
        - test
        - optional: whitespace
        - literal: ':'
        - optional: whitespace
        - test
      -
        - optional: whitespace
        - literal: '**'
        - optional: whitespace
        - expr
    - or:
      - comp_for
      -
        - optional:
            repeat:
              - optional: whitespace
              - literal: ','
              - or:
                -
                  - test
                  - optional: whitespace
                  - literal: ':'
                  - optional: whitespace
                  - test
                -
                  - optional: whitespace
                  - literal: '**'
                  - optional: whitespace
                  - expr
        - optional:
           - optional: whitespace
           - literal: ','
    -
      - or:
        - test
        - star_expr
      - or:
        - comp_for
        -
          - optional:
             repeat:
              - optional: whitespace
              - literal: ','
              - optional: whitespace
              - or:
                - test
                - star_expr
          - optional:
            - optional: whitespace
            - literal: ','

classdef:
  - literal: class
  - whitespace
  - name
  - optional:
    - optional: whitespace
    - literal: '('
    - optional: arglist
    - optional: whitespace
    - literal: ')'
  - optional: whitespace
  - literal: ':'
  - suite

#arglist: argument (',' argument)*  [',']
arglist:
  - argument
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - optional: whitespace
      - argument
  - optional:
    - optional: whitespace
    - literal: ','

argument:
  or:
    -
      - test
      - optional: comp_for
    - 
      - test
      - optional: whitespace
      - literal: '='
      - optional: whitespace
      - test
    -
      - optional: whitespace
      - literal: '**'
      - optional: whitespace
      - test
    - 
      - optional: whitespace
      - literal: '*'
      - optional: whitespace
      - test

comp_iter:
  or:
    - comp_for
    - comp_if

comp_for:
  - literal: 'for'
  - whitespace
  - exprlist
  - whitespace
  - literal: 'in'
  - whitespace
  - or_test
  - optional: comp_iter

comp_if:
  - literal: 'if'
  - whitespace
  - test_nocond
  - optional: comp_iter

encoding_decl: name

yield_expr:
  - literal: yield
  - whitespace
  - optional: yield_arg

yield_arg:
  or:
    - 
      - literal: from
      - whitespace
      - test
    - testlist

stmt:
  - current_indent
  - or:
    - simple_stmt
    - compound_stmt

simple_stmt:
  - small_stmt
  - optional:
     repeat:
       - optional: whitespace
       - literal: ';'
       - small_stmt
  - optional:
    - optional: whitespace
    - literal: ';'
  - newline

small_stmt:
  or:
    - expr_stmt
    - del_stmt
    - pass_stmt
    - flow_stmt
    - import_stmt
    - global_stmt
    - nonlocal_stmt
    - assert_stmt

#expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) |
#                     ('=' (yield_expr|testlist_star_expr))*)
expr_stmt:
  - testlist_star_expr
  - or:
    - 
      - augassign
      - or:
        - yield_expr
        - testlist
    -
      optional:
        repeat:
          - optional: whitespace
          - literal: '='
          - optional: whitespace
          - or:
            - yield_expr
            - testlist_star_expr

testlist_star_expr:
  - or:
    - test
    - star_expr
  - optional:
    - repeat:
       - optional: whitespace
       - literal: ','
       - optional: whitespace
       - or:
         - test
         - star_expr
  - optional:
     - optional: whitespace
     - literal: ','

augassign:
  - optional: whitespace
  - or:
     - literal: '+='
     - literal: '-='
     - literal: '*='
     - literal: '@='
     - literal: '/='
     - literal: '%='
     - literal: '&='
     - literal: '|='
     - literal: '^='
     - literal: '<<='
     - literal: '>>='
     - literal: '**='
     - literal: '//='
  - optional: whitespace

del_stmt:
  - literal: del
  - whitespace
  - exprlist

pass_stmt:
  - literal: pass

flow_stmt:
  or:
    - break_stmt
    - continue_stmt
    - return_stmt
    - raise_stmt
    - yield_stmt

break_stmt:
  - literal: break

continue_stmt:
  - literal: continue

return_stmt:
  - literal: return
  - optional:
    - whitespace
    - optional: testlist

yield_stmt:
  - literal: yield_expr

raise_stmt:
  - literal: raise
  - optional:
     - test
     - optional:
       - whitespace
       - literal: from
       - whitespace
       - test

import_stmt:
  or:
    - import_name
    - import_from

import_name:
  - literal: import
  - whitespace
  - dotted_as_names

import_from:
  - literal: from
  - whitespace
  - or:
    -
      - optional:
         repeat:
          literal: '.'
      - dotted_name
    - repeat:
        literal: '.'
  - whitespace
  - literal: import
  - whitespace
  - or:
     - literal: '*'
     - 
       - literal: '('
       - optional: whitespace
       - import_as_names
       - optional: whitespace
       - literal: ')'
     - import_as_names

import_as_name:
  - name
  - optional:
    - whitespace
    - literal: as
    - whitespace
    - name

dotted_as_name:
  - dotted_name
  - optional:
     - whitespace
     - name

import_as_names:
  - import_as_name
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - import_as_name
  - optional:
    - optional: whitespace
    - literal: ','

dotted_as_names:
  - dotted_as_name
  - optional:
     repeat:
       - optional: whitespace
       - literal: ','
       - dotted_as_name

dotted_name:
  - name
  - optional:
     repeat:
      - literal: '.'
      - name

global_stmt:
  - literal: global
  - name
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - optional: whitespace
      - name

nonlocal_stmt:
  - literal: nonlocal
  - name
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - optional: whitespace
      - name

assert_stmt:
  - literal: assert
  - whitespace
  - test
  - optional:
     repeat:
      - optional: whitespace
      - literal: ','
      - optional: whitespace
      - test

compound_stmt:
  or:
    - if_stmt
    - while_stmt
    - for_stmt
    - try_stmt
    - with_stmt
    - funcdef
    - classdef
    - decorated
    - async_stmt

async_stmt:
  - literal: async
  - or:
    - funcdef
    - with_stmt
    - for_stmt

if_stmt:
  - literal: if
  - whitespace
  - test
  - optional: whitespace
  - literal: ':'
  - suite
  - optional:
     repeat:
      - current_indent
      - literal: 'elif'
      - whitespace
      - test
      - optional: whitespace
      - literal: ':'
      - suite
  - optional:
    - current_indent
    - literal: else
    - optional: whitespace
    - literal: ':'
    - suite

while_stmt:
  - literal: while
  - whitespace
  - test
  - optional: whitespace
  - literal: ':'
  - suite
  - optional:
    - optional: whitespace
    - literal: else
    - optional: whitespace
    - literal: ':'
    - suite

for_stmt:
  - literal: for
  - whitespace
  - exprlist
  - whitespace
  - literal: in
  - whitespace
  - testlist
  - optional: whitespace
  - literal: ':'
  - suite
  - optional:
     - optional: whitespace
     - literal: else
     - optional: whitespace
     - literal: ':'
     - suite

try_stmt:
  - literal: try
  - optional: whitespace
  - literal: ':'
  - suite
  - or:
    -
      - repeat:
         - except_clause
         - optional: whitespace
         - literal: ':'
         - suite
      - optional:
         - literal: else
         - optional: whitespace
         - literal: ':'
         - suite
      - optional:
         - literal: finally
         - optional: whitespace
         - literal: ':'
         - suite
    -
      - literal: finally
      - optional: whitespace
      - literal: ':'
      - suite

with_stmt:
  - literal: with
  - whitespace
  - with_item
  - optional:
     repeat:
       - literal: ','
       - optional: whitespace
       - with_item
  - optional: whitespace
  - literal: ':'
  - suite

with_item:
  - test
  - optional:
     - whitespace
     - literal: as
     - whitespace
     - expr

except_clause:
  - literal: except
  - optional:
    - test
    - optional:
       - whitespace
       - literal: as
       - whitespace
       - name

pass:
  ast-node:
    props: 
      node_type: pass
    value:
      literal: pass

indented_stmt:
  - newline
  - indent
  - repeat:
    - stmt
  - dedent

suite:
  - or:
    - 
      - optional: whitespace
      - simple_stmt
    - indented_stmt

